package TutorialExamples

import Chisel._
import scala.collection.mutable.ArrayBuffer

object TutorialExamples {
  def main(args: Array[String]): Unit = {
      val tutArgs = args.slice(1, args.length)
      val res = 
      args(0) match {
        case "GCD" =>
          chiselMainTest(tutArgs, () => Module(new GCD())){
	    c => new GCDTests(c)}
	case "Combinational" =>
	  chiselMainTest(tutArgs, () => Module(new Combinational())){
	    c => new CombinationalTests(c)}
	case "Functional" =>
	  chiselMainTest(tutArgs, () => Module(new Functional())){
	    c => new FunctionalTests(c)}
	case "Parity" =>
	  chiselMainTest(tutArgs, () => Module(new Parity())){
	    c => new ParityTests(c)}
	case "Tbl" =>
	  chiselMainTest(tutArgs, () => Module(new Tbl())){
	    c => new TblTests(c)}
	case "Life" =>
	  chiselMainTest(tutArgs, () => Module(new Life(3))){
	    c => new LifeTests(c)}
	case "Risc" =>
	  chiselMainTest(tutArgs, () => Module(new Risc())){
	    c => new RiscTests(c)}
	case "Router" =>
	  chiselMainTest(tutArgs, () => Module(new Router())){
	    c => new RouterTests(c)}
	case "Echo" => // TODO: BROKEN
	  chiselMainTest(tutArgs, () => Module(new GCD())){
	    c => new GCDTests(c)}
	  // chiselMainTest(tutArgs, () => Module(new Echo())){
	  //   c => new EchoTests(c, "../src/in.wav", "out.wav")}
	case "Darken" =>
	  chiselMainTest(tutArgs, () => Module(new Darken())){
	    c => new DarkenTests(c, "../src/in.im24", "out.im24")}
	case "Adder" =>
	  chiselMainTest(tutArgs, () => Module(new Adder(8))){
	    c => new AdderTests(c)}
	case "Fame" =>
	  chiselMainTest(tutArgs.slice(0, tutArgs.length - 1) ++ Array("Chisel.Fame1CppBackend", "--debug", "--vcd", "--ioDebug"), () => Module(new FameTransform())){
	    c => new FameTests(c)}
	case "Adder4" =>
	  chiselMainTest(tutArgs, () => Module(new Adder4())){
	    c => new Adder4Tests(c)}
	case "BasicALU" =>
	  chiselMainTest(tutArgs, () => Module(new SimpleALU())){
	    c => new SimpleALUTests(c)}
	case "FullAdder" =>
	  chiselMainTest(tutArgs, () => Module(new FullAdder())){
	    c => new FullAdderTests(c)}
	case "FullAdder2" =>
	  chiselMainTest(tutArgs, () => Module(new FullAdder2())){
	    c => new FullAdder2Tests(c)}
	case "ByteSelector" =>
	  chiselMainTest(tutArgs, () => Module(new ByteSelector())){
	    c => new ByteSelectorTests(c)}
	case "HiLoMultiplier" =>
	  chiselMainTest(tutArgs, () => Module(new HiLoMultiplier())){
	    c => new HiLoMultiplierTests(c)}
	case "ShiftRegister" =>
	  chiselMainTest(tutArgs, () => Module(new ShiftRegister())){
	    c => new ShiftRegisterTests(c)}
	case "ResetShiftRegister" =>
	  chiselMainTest(tutArgs, () => Module(new ResetShiftRegister())){
	    c => new ResetShiftRegisterTests(c)}
	case "EnableShiftRegister" =>
	  chiselMainTest(tutArgs, () => Module(new EnableShiftRegister())){
	    c => new EnableShiftRegisterTests(c)}
	case "LogShifter" =>
	  chiselMainTest(tutArgs, () => Module(new LogShifter())){
	    c => new LogShifterTests(c)}
	case "VecSearch" =>
	  chiselMainTest(tutArgs, () => Module(new VecSearch())){
	    c => new VecSearchTests(c)}
	case "MemorySearch" =>
	  chiselMainTest(tutArgs, () => Module(new MemorySearch())){
	    c => new MemorySearchTests(c)}
	case "MultiClockDomain" =>
	  chiselMainTest(tutArgs, () => Module(new MultiClockDomain())){
	    c => new MultiClockDomainTests(c)}
	case "Stack" =>
	  chiselMainTest(tutArgs, () => Module(new Stack(32))){
	    c => new StackTests(c)}
        // DaisyWrappers
        case "GCDWrapper" =>
          chiselMainTest(tutArgs, () => Module(new GCDWrapper())){
	    c => new GCDWrapperTests(c)}
	case "CombinationalWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new CombinationalWrapper())){
	    c => new CombinationalWrapperTests(c)}
	case "FunctionalWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new FunctionalWrapper())){
	    c => new FunctionalWrapperTests(c)}
	case "ParityWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new ParityWrapper())){
	    c => new ParityWrapperTests(c)}
	case "TblWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new TblWrapper())){
	    c => new TblWrapperTests(c)}
	case "LifeWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new LifeWrapper(3))){
	    c => new LifeWrapperTests(c)}
	case "RiscWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new RiscWrapper())){
	    c => new RiscWrapperTests(c)}
	case "RouterWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new RouterWrapper())){
	    c => new RouterWrapperTests(c)}
	case "EchoWrapper" => // TODO: BROKEN
	  chiselMainTest(tutArgs, () => Module(new GCDWrapper())){
	    c => new GCDWrapperTests(c)}
	  // chiselMainTest(tutArgs, () => Module(new EchoWrapper())){
	  //   c => new EchoWrapperTests(c, "../src/in.wav", "out.wav")}
	case "DarkenWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new DarkenWrapper())){
	    c => new DarkenWrapperTests(c, "../src/in.im24", "out.im24")}
	case "AdderWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new AdderWrapper(8))){
	    c => new AdderWrapperTests(c)}
	case "FameWrapper" => // Do nothing
	case "Adder4Wrapper" =>
	  chiselMainTest(tutArgs, () => Module(new Adder4Wrapper())){
	    c => new Adder4WrapperTests(c)}
	case "BasicALUWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new SimpleALUWrapper())){
	    c => new SimpleALUWrapperTests(c)}
	case "FullAdderWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new FullAdderWrapper())){
	    c => new FullAdderWrapperTests(c)}
	case "FullAdder2Wrapper" =>
	  chiselMainTest(tutArgs, () => Module(new FullAdder2Wrapper())){
	    c => new FullAdder2WrapperTests(c)}
	case "ByteSelectorWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new ByteSelectorWrapper())){
	    c => new ByteSelectorWrapperTests(c)}
	case "HiLoMultiplierWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new HiLoMultiplierWrapper())){
	    c => new HiLoMultiplierWrapperTests(c)}
	case "ShiftRegisterWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new ShiftRegisterWrapper())){
	    c => new ShiftRegisterWrapperTests(c)}
	case "ResetShiftRegisterWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new ResetShiftRegisterWrapper())){
	    c => new ResetShiftRegisterWrapperTests(c)}
	case "EnableShiftRegisterWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new EnableShiftRegisterWrapper())){
	    c => new EnableShiftRegisterWrapperTests(c)}
	case "LogShifterWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new LogShifterWrapper())){
	    c => new LogShifterWrapperTests(c)}
	case "VecSearchWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new VecSearchWrapper())){
	    c => new VecSearchWrapperTests(c)}
	case "MemorySearchWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new MemorySearchWrapper())){
	    c => new MemorySearchWrapperTests(c)}
	case "MultiClockDomainWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new MultiClockDomainWrapper())){
	    c => new MultiClockDomainWrapperTests(c)}
	case "StackWrapper" =>
	  chiselMainTest(tutArgs, () => Module(new StackWrapper(32))){
	    c => new StackWrapperTests(c)}
    }
  }
}

